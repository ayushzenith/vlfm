from typing import List, Optional, Tuple, Union

import numpy as np

class RRT:
    class Node:
        def __init__(self, x: float, y: float) -> None: ...

    class AreaBounds:
        def __init__(self, area: List[float]) -> None: ...

    def __init__(
        self,
        start: Tuple[float, float],
        goal: np.ndarray,
        occupancy_map: np.ndarray,
        rand_area: List[int],
        robot_radius: int,
    ) -> None: ...
    def planning(self, animation: bool = True) -> Union[None, List[List[float]]]: ...
    def steer(
        self, from_node: Node, to_node: Node, extend_length: float = float("inf")
    ) -> Node: ...
    def generate_final_course(self, goal_ind: int) -> List[List[float]]: ...
    def calc_dist_to_goal(self, x: float, y: float) -> float: ...
    def get_random_node(self) -> Node: ...
    def write_img(self, final_path: Optional[List[List[float]]] = None) -> None: ...
    @staticmethod
    def plot_circle(x: float, y: float, size: float, color: str = "-b") -> None: ...
    @staticmethod
    def get_nearest_node_index(node_list: List[Node], rnd_node: Node) -> int: ...
    @staticmethod
    def check_if_outside_play_area(node: Node, play_area: AreaBounds) -> bool: ...
    @staticmethod
    def calc_distance_and_angle(
        from_node: Node, to_node: Node
    ) -> Tuple[float, float]: ...

class RRTStar:
    class Node:
        def __init__(self, x: float, y: float) -> None: ...

    def __init__(
        self,
        start: Tuple[float, float],
        goal: np.ndarray,
        occupancy_map: np.ndarray,
        rand_area: List[int],
        robot_radius: int,
    ) -> None: ...
    def planning(self, animation: bool = True) -> Union[None, List[List[float]]]: ...
    def choose_parent(
        self, new_node: Node, near_inds: List[Node]
    ) -> Union[None, Node]: ...
    def search_best_goal_node(self) -> Union[None, int]: ...
    def find_near_nodes(self, new_node: Node) -> List[int]: ...
    def rewire(self, new_node: Node, near_inds: List[Node]) -> None: ...
    def calc_new_cost(self, from_node: Node, to_node: Node) -> float: ...
    def propagate_cost_to_leaves(self, parent_node: Node) -> None: ...
    def write_img(self, final_path: Optional[List[List[float]]] = None) -> None: ...
